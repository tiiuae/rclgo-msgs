/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package sensor_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/tiiuae/rclgo-msgs/builtin_interfaces/msg"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lsensor_msgs__rosidl_typesupport_c -lsensor_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <sensor_msgs/msg/time_reference.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("sensor_msgs/TimeReference", TimeReferenceTypeSupport)
}

// Do not create instances of this type directly. Always use NewTimeReference
// function instead.
type TimeReference struct {
	Header std_msgs_msg.Header `yaml:"header"`// stamp is system time for which measurement was valid
	TimeRef builtin_interfaces_msg.Time `yaml:"time_ref"`// corresponding time from this external source
	Source string `yaml:"source"`// (optional) name of time source
}

// NewTimeReference creates a new TimeReference with default values.
func NewTimeReference() *TimeReference {
	self := TimeReference{}
	self.SetDefaults()
	return &self
}

func (t *TimeReference) Clone() *TimeReference {
	c := &TimeReference{}
	c.Header = *t.Header.Clone()
	c.TimeRef = *t.TimeRef.Clone()
	c.Source = t.Source
	return c
}

func (t *TimeReference) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TimeReference) SetDefaults() {
	t.Header.SetDefaults()
	t.TimeRef.SetDefaults()
	t.Source = ""
}

// CloneTimeReferenceSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTimeReferenceSlice(dst, src []TimeReference) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TimeReferenceTypeSupport types.MessageTypeSupport = _TimeReferenceTypeSupport{}

type _TimeReferenceTypeSupport struct{}

func (t _TimeReferenceTypeSupport) New() types.Message {
	return NewTimeReference()
}

func (t _TimeReferenceTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.sensor_msgs__msg__TimeReference
	return (unsafe.Pointer)(C.sensor_msgs__msg__TimeReference__create())
}

func (t _TimeReferenceTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.sensor_msgs__msg__TimeReference__destroy((*C.sensor_msgs__msg__TimeReference)(pointer_to_free))
}

func (t _TimeReferenceTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TimeReference)
	mem := (*C.sensor_msgs__msg__TimeReference)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.time_ref), &m.TimeRef)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.source), m.Source)
}

func (t _TimeReferenceTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TimeReference)
	mem := (*C.sensor_msgs__msg__TimeReference)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.TimeRef, unsafe.Pointer(&mem.time_ref))
	primitives.StringAsGoStruct(&m.Source, unsafe.Pointer(&mem.source))
}

func (t _TimeReferenceTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__TimeReference())
}

type CTimeReference = C.sensor_msgs__msg__TimeReference
type CTimeReference__Sequence = C.sensor_msgs__msg__TimeReference__Sequence

func TimeReference__Sequence_to_Go(goSlice *[]TimeReference, cSlice CTimeReference__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TimeReference, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.sensor_msgs__msg__TimeReference__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__TimeReference * uintptr(i)),
		))
		TimeReferenceTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func TimeReference__Sequence_to_C(cSlice *CTimeReference__Sequence, goSlice []TimeReference) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.sensor_msgs__msg__TimeReference)(C.malloc((C.size_t)(C.sizeof_struct_sensor_msgs__msg__TimeReference * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.sensor_msgs__msg__TimeReference)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_sensor_msgs__msg__TimeReference * uintptr(i)),
		))
		TimeReferenceTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func TimeReference__Array_to_Go(goSlice []TimeReference, cSlice []CTimeReference) {
	for i := 0; i < len(cSlice); i++ {
		TimeReferenceTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TimeReference__Array_to_C(cSlice []CTimeReference, goSlice []TimeReference) {
	for i := 0; i < len(goSlice); i++ {
		TimeReferenceTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
