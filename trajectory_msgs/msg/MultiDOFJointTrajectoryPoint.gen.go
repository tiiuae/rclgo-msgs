/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package trajectory_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/tiiuae/rclgo-msgs/builtin_interfaces/msg"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ltrajectory_msgs__rosidl_typesupport_c -ltrajectory_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <trajectory_msgs/msg/multi_dof_joint_trajectory_point.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("trajectory_msgs/MultiDOFJointTrajectoryPoint", MultiDOFJointTrajectoryPointTypeSupport)
}

// Do not create instances of this type directly. Always use NewMultiDOFJointTrajectoryPoint
// function instead.
type MultiDOFJointTrajectoryPoint struct {
	Transforms []geometry_msgs_msg.Transform `yaml:"transforms"`// Each multi-dof joint can specify a transform (up to 6 DOF).
	Velocities []geometry_msgs_msg.Twist `yaml:"velocities"`// There can be a velocity specified for the origin of the joint.
	Accelerations []geometry_msgs_msg.Twist `yaml:"accelerations"`// There can be an acceleration specified for the origin of the joint.
	TimeFromStart builtin_interfaces_msg.Duration `yaml:"time_from_start"`// Desired time from the trajectory start to arrive at this trajectory point.
}

// NewMultiDOFJointTrajectoryPoint creates a new MultiDOFJointTrajectoryPoint with default values.
func NewMultiDOFJointTrajectoryPoint() *MultiDOFJointTrajectoryPoint {
	self := MultiDOFJointTrajectoryPoint{}
	self.SetDefaults()
	return &self
}

func (t *MultiDOFJointTrajectoryPoint) Clone() *MultiDOFJointTrajectoryPoint {
	c := &MultiDOFJointTrajectoryPoint{}
	if t.Transforms != nil {
		c.Transforms = make([]geometry_msgs_msg.Transform, len(t.Transforms))
		geometry_msgs_msg.CloneTransformSlice(c.Transforms, t.Transforms)
	}
	if t.Velocities != nil {
		c.Velocities = make([]geometry_msgs_msg.Twist, len(t.Velocities))
		geometry_msgs_msg.CloneTwistSlice(c.Velocities, t.Velocities)
	}
	if t.Accelerations != nil {
		c.Accelerations = make([]geometry_msgs_msg.Twist, len(t.Accelerations))
		geometry_msgs_msg.CloneTwistSlice(c.Accelerations, t.Accelerations)
	}
	c.TimeFromStart = *t.TimeFromStart.Clone()
	return c
}

func (t *MultiDOFJointTrajectoryPoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MultiDOFJointTrajectoryPoint) SetDefaults() {
	t.Transforms = nil
	t.Velocities = nil
	t.Accelerations = nil
	t.TimeFromStart.SetDefaults()
}

// CloneMultiDOFJointTrajectoryPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMultiDOFJointTrajectoryPointSlice(dst, src []MultiDOFJointTrajectoryPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MultiDOFJointTrajectoryPointTypeSupport types.MessageTypeSupport = _MultiDOFJointTrajectoryPointTypeSupport{}

type _MultiDOFJointTrajectoryPointTypeSupport struct{}

func (t _MultiDOFJointTrajectoryPointTypeSupport) New() types.Message {
	return NewMultiDOFJointTrajectoryPoint()
}

func (t _MultiDOFJointTrajectoryPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint
	return (unsafe.Pointer)(C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint__create())
}

func (t _MultiDOFJointTrajectoryPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint__destroy((*C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint)(pointer_to_free))
}

func (t _MultiDOFJointTrajectoryPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MultiDOFJointTrajectoryPoint)
	mem := (*C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint)(dst)
	geometry_msgs_msg.Transform__Sequence_to_C((*geometry_msgs_msg.CTransform__Sequence)(unsafe.Pointer(&mem.transforms)), m.Transforms)
	geometry_msgs_msg.Twist__Sequence_to_C((*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.velocities)), m.Velocities)
	geometry_msgs_msg.Twist__Sequence_to_C((*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.accelerations)), m.Accelerations)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.time_from_start), &m.TimeFromStart)
}

func (t _MultiDOFJointTrajectoryPointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MultiDOFJointTrajectoryPoint)
	mem := (*C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint)(ros2_message_buffer)
	geometry_msgs_msg.Transform__Sequence_to_Go(&m.Transforms, *(*geometry_msgs_msg.CTransform__Sequence)(unsafe.Pointer(&mem.transforms)))
	geometry_msgs_msg.Twist__Sequence_to_Go(&m.Velocities, *(*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.velocities)))
	geometry_msgs_msg.Twist__Sequence_to_Go(&m.Accelerations, *(*geometry_msgs_msg.CTwist__Sequence)(unsafe.Pointer(&mem.accelerations)))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.TimeFromStart, unsafe.Pointer(&mem.time_from_start))
}

func (t _MultiDOFJointTrajectoryPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__MultiDOFJointTrajectoryPoint())
}

type CMultiDOFJointTrajectoryPoint = C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint
type CMultiDOFJointTrajectoryPoint__Sequence = C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint__Sequence

func MultiDOFJointTrajectoryPoint__Sequence_to_Go(goSlice *[]MultiDOFJointTrajectoryPoint, cSlice CMultiDOFJointTrajectoryPoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MultiDOFJointTrajectoryPoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_trajectory_msgs__msg__MultiDOFJointTrajectoryPoint * uintptr(i)),
		))
		MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func MultiDOFJointTrajectoryPoint__Sequence_to_C(cSlice *CMultiDOFJointTrajectoryPoint__Sequence, goSlice []MultiDOFJointTrajectoryPoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint)(C.malloc((C.size_t)(C.sizeof_struct_trajectory_msgs__msg__MultiDOFJointTrajectoryPoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.trajectory_msgs__msg__MultiDOFJointTrajectoryPoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_trajectory_msgs__msg__MultiDOFJointTrajectoryPoint * uintptr(i)),
		))
		MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func MultiDOFJointTrajectoryPoint__Array_to_Go(goSlice []MultiDOFJointTrajectoryPoint, cSlice []CMultiDOFJointTrajectoryPoint) {
	for i := 0; i < len(cSlice); i++ {
		MultiDOFJointTrajectoryPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MultiDOFJointTrajectoryPoint__Array_to_C(cSlice []CMultiDOFJointTrajectoryPoint, goSlice []MultiDOFJointTrajectoryPoint) {
	for i := 0; i < len(goSlice); i++ {
		MultiDOFJointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
