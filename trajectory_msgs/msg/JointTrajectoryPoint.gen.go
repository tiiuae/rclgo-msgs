/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package trajectory_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/tiiuae/rclgo-msgs/builtin_interfaces/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -ltrajectory_msgs__rosidl_typesupport_c -ltrajectory_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <trajectory_msgs/msg/joint_trajectory_point.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("trajectory_msgs/JointTrajectoryPoint", JointTrajectoryPointTypeSupport)
}

// Do not create instances of this type directly. Always use NewJointTrajectoryPoint
// function instead.
type JointTrajectoryPoint struct {
	Positions []float64 `yaml:"positions"`// Single DOF joint positions for each joint relative to their "0" position.The units depend on the specific joint type: radians for revolute orcontinuous joints, and meters for prismatic joints.
	Velocities []float64 `yaml:"velocities"`// The rate of change in position of each joint. Units are joint type dependent.Radians/second for revolute or continuous joints, and meters/second forprismatic joints.
	Accelerations []float64 `yaml:"accelerations"`// Rate of change in velocity of each joint. Units are joint type dependent.Radians/second^2 for revolute or continuous joints, and meters/second^2 forprismatic joints.
	Effort []float64 `yaml:"effort"`// The torque or the force to be applied at each joint. For revolute/continuousjoints effort denotes a torque in newton-meters. For prismatic joints, effortdenotes a force in newtons.
	TimeFromStart builtin_interfaces_msg.Duration `yaml:"time_from_start"`// Desired time from the trajectory start to arrive at this trajectory point.
}

// NewJointTrajectoryPoint creates a new JointTrajectoryPoint with default values.
func NewJointTrajectoryPoint() *JointTrajectoryPoint {
	self := JointTrajectoryPoint{}
	self.SetDefaults()
	return &self
}

func (t *JointTrajectoryPoint) Clone() *JointTrajectoryPoint {
	c := &JointTrajectoryPoint{}
	if t.Positions != nil {
		c.Positions = make([]float64, len(t.Positions))
		copy(c.Positions, t.Positions)
	}
	if t.Velocities != nil {
		c.Velocities = make([]float64, len(t.Velocities))
		copy(c.Velocities, t.Velocities)
	}
	if t.Accelerations != nil {
		c.Accelerations = make([]float64, len(t.Accelerations))
		copy(c.Accelerations, t.Accelerations)
	}
	if t.Effort != nil {
		c.Effort = make([]float64, len(t.Effort))
		copy(c.Effort, t.Effort)
	}
	c.TimeFromStart = *t.TimeFromStart.Clone()
	return c
}

func (t *JointTrajectoryPoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointTrajectoryPoint) SetDefaults() {
	t.Positions = nil
	t.Velocities = nil
	t.Accelerations = nil
	t.Effort = nil
	t.TimeFromStart.SetDefaults()
}

// CloneJointTrajectoryPointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointTrajectoryPointSlice(dst, src []JointTrajectoryPoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointTrajectoryPointTypeSupport types.MessageTypeSupport = _JointTrajectoryPointTypeSupport{}

type _JointTrajectoryPointTypeSupport struct{}

func (t _JointTrajectoryPointTypeSupport) New() types.Message {
	return NewJointTrajectoryPoint()
}

func (t _JointTrajectoryPointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.trajectory_msgs__msg__JointTrajectoryPoint
	return (unsafe.Pointer)(C.trajectory_msgs__msg__JointTrajectoryPoint__create())
}

func (t _JointTrajectoryPointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.trajectory_msgs__msg__JointTrajectoryPoint__destroy((*C.trajectory_msgs__msg__JointTrajectoryPoint)(pointer_to_free))
}

func (t _JointTrajectoryPointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointTrajectoryPoint)
	mem := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(dst)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.positions)), m.Positions)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)), m.Velocities)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.accelerations)), m.Accelerations)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.effort)), m.Effort)
	builtin_interfaces_msg.DurationTypeSupport.AsCStruct(unsafe.Pointer(&mem.time_from_start), &m.TimeFromStart)
}

func (t _JointTrajectoryPointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointTrajectoryPoint)
	mem := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(ros2_message_buffer)
	primitives.Float64__Sequence_to_Go(&m.Positions, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.positions)))
	primitives.Float64__Sequence_to_Go(&m.Velocities, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.velocities)))
	primitives.Float64__Sequence_to_Go(&m.Accelerations, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.accelerations)))
	primitives.Float64__Sequence_to_Go(&m.Effort, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.effort)))
	builtin_interfaces_msg.DurationTypeSupport.AsGoStruct(&m.TimeFromStart, unsafe.Pointer(&mem.time_from_start))
}

func (t _JointTrajectoryPointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__trajectory_msgs__msg__JointTrajectoryPoint())
}

type CJointTrajectoryPoint = C.trajectory_msgs__msg__JointTrajectoryPoint
type CJointTrajectoryPoint__Sequence = C.trajectory_msgs__msg__JointTrajectoryPoint__Sequence

func JointTrajectoryPoint__Sequence_to_Go(goSlice *[]JointTrajectoryPoint, cSlice CJointTrajectoryPoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointTrajectoryPoint, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.trajectory_msgs__msg__JointTrajectoryPoint__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * uintptr(i)),
		))
		JointTrajectoryPointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func JointTrajectoryPoint__Sequence_to_C(cSlice *CJointTrajectoryPoint__Sequence, goSlice []JointTrajectoryPoint) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.trajectory_msgs__msg__JointTrajectoryPoint)(C.malloc((C.size_t)(C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.trajectory_msgs__msg__JointTrajectoryPoint)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_trajectory_msgs__msg__JointTrajectoryPoint * uintptr(i)),
		))
		JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func JointTrajectoryPoint__Array_to_Go(goSlice []JointTrajectoryPoint, cSlice []CJointTrajectoryPoint) {
	for i := 0; i < len(cSlice); i++ {
		JointTrajectoryPointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointTrajectoryPoint__Array_to_C(cSlice []CJointTrajectoryPoint, goSlice []JointTrajectoryPoint) {
	for i := 0; i < len(goSlice); i++ {
		JointTrajectoryPointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
