/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package fog_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lfog_msgs__rosidl_typesupport_c -lfog_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <fog_msgs/srv/set_px4_param_float.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("fog_msgs/SetPx4ParamFloat_Response", SetPx4ParamFloat_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewSetPx4ParamFloat_Response
// function instead.
type SetPx4ParamFloat_Response struct {
	ParamName string `yaml:"param_name"`
	Value float64 `yaml:"value"`
	Success bool `yaml:"success"`
	Message string `yaml:"message"`
}

// NewSetPx4ParamFloat_Response creates a new SetPx4ParamFloat_Response with default values.
func NewSetPx4ParamFloat_Response() *SetPx4ParamFloat_Response {
	self := SetPx4ParamFloat_Response{}
	self.SetDefaults()
	return &self
}

func (t *SetPx4ParamFloat_Response) Clone() *SetPx4ParamFloat_Response {
	c := &SetPx4ParamFloat_Response{}
	c.ParamName = t.ParamName
	c.Value = t.Value
	c.Success = t.Success
	c.Message = t.Message
	return c
}

func (t *SetPx4ParamFloat_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetPx4ParamFloat_Response) SetDefaults() {
	t.ParamName = ""
	t.Value = 0
	t.Success = false
	t.Message = ""
}

// CloneSetPx4ParamFloat_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetPx4ParamFloat_ResponseSlice(dst, src []SetPx4ParamFloat_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetPx4ParamFloat_ResponseTypeSupport types.MessageTypeSupport = _SetPx4ParamFloat_ResponseTypeSupport{}

type _SetPx4ParamFloat_ResponseTypeSupport struct{}

func (t _SetPx4ParamFloat_ResponseTypeSupport) New() types.Message {
	return NewSetPx4ParamFloat_Response()
}

func (t _SetPx4ParamFloat_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.fog_msgs__srv__SetPx4ParamFloat_Response
	return (unsafe.Pointer)(C.fog_msgs__srv__SetPx4ParamFloat_Response__create())
}

func (t _SetPx4ParamFloat_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.fog_msgs__srv__SetPx4ParamFloat_Response__destroy((*C.fog_msgs__srv__SetPx4ParamFloat_Response)(pointer_to_free))
}

func (t _SetPx4ParamFloat_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetPx4ParamFloat_Response)
	mem := (*C.fog_msgs__srv__SetPx4ParamFloat_Response)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.param_name), m.ParamName)
	mem.value = C.double(m.Value)
	mem.success = C.bool(m.Success)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.message), m.Message)
}

func (t _SetPx4ParamFloat_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetPx4ParamFloat_Response)
	mem := (*C.fog_msgs__srv__SetPx4ParamFloat_Response)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ParamName, unsafe.Pointer(&mem.param_name))
	m.Value = float64(mem.value)
	m.Success = bool(mem.success)
	primitives.StringAsGoStruct(&m.Message, unsafe.Pointer(&mem.message))
}

func (t _SetPx4ParamFloat_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__fog_msgs__srv__SetPx4ParamFloat_Response())
}

type CSetPx4ParamFloat_Response = C.fog_msgs__srv__SetPx4ParamFloat_Response
type CSetPx4ParamFloat_Response__Sequence = C.fog_msgs__srv__SetPx4ParamFloat_Response__Sequence

func SetPx4ParamFloat_Response__Sequence_to_Go(goSlice *[]SetPx4ParamFloat_Response, cSlice CSetPx4ParamFloat_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetPx4ParamFloat_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.fog_msgs__srv__SetPx4ParamFloat_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__srv__SetPx4ParamFloat_Response * uintptr(i)),
		))
		SetPx4ParamFloat_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func SetPx4ParamFloat_Response__Sequence_to_C(cSlice *CSetPx4ParamFloat_Response__Sequence, goSlice []SetPx4ParamFloat_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.fog_msgs__srv__SetPx4ParamFloat_Response)(C.malloc((C.size_t)(C.sizeof_struct_fog_msgs__srv__SetPx4ParamFloat_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.fog_msgs__srv__SetPx4ParamFloat_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__srv__SetPx4ParamFloat_Response * uintptr(i)),
		))
		SetPx4ParamFloat_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func SetPx4ParamFloat_Response__Array_to_Go(goSlice []SetPx4ParamFloat_Response, cSlice []CSetPx4ParamFloat_Response) {
	for i := 0; i < len(cSlice); i++ {
		SetPx4ParamFloat_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetPx4ParamFloat_Response__Array_to_C(cSlice []CSetPx4ParamFloat_Response, goSlice []SetPx4ParamFloat_Response) {
	for i := 0; i < len(goSlice); i++ {
		SetPx4ParamFloat_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
