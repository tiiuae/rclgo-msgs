/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package fog_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geographic_msgs_msg "github.com/tiiuae/rclgo-msgs/geographic_msgs/msg"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/foxy/lib -Wl,-rpath=/opt/ros/foxy/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lfog_msgs__rosidl_typesupport_c -lfog_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeographic_msgs__rosidl_typesupport_c -lgeographic_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/foxy/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <fog_msgs/msg/trajectory.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("fog_msgs/Trajectory", TrajectoryTypeSupport)
}

// Do not create instances of this type directly. Always use NewTrajectory
// function instead.
type Trajectory struct {
	Header std_msgs_msg.Header `yaml:"header"`// Message Header, timestamp represents when plan is calculated
	Priority uint16 `yaml:"priority"`// Right of way priority, smaller priority number has right of way
	Droneid string `yaml:"droneid"`// Drone identifier
	Datum geographic_msgs_msg.GeoPoint `yaml:"datum"`// Datum reference point for path messages
	Path [10]geometry_msgs_msg.Point `yaml:"path"`// Planned trajectory
}

// NewTrajectory creates a new Trajectory with default values.
func NewTrajectory() *Trajectory {
	self := Trajectory{}
	self.SetDefaults()
	return &self
}

func (t *Trajectory) Clone() *Trajectory {
	c := &Trajectory{}
	c.Header = *t.Header.Clone()
	c.Priority = t.Priority
	c.Droneid = t.Droneid
	c.Datum = *t.Datum.Clone()
	geometry_msgs_msg.ClonePointSlice(c.Path[:], t.Path[:])
	return c
}

func (t *Trajectory) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Trajectory) SetDefaults() {
	t.Header.SetDefaults()
	t.Priority = 0
	t.Droneid = ""
	t.Datum.SetDefaults()
	for i := range t.Path {
		t.Path[i].SetDefaults()
	}
}

// CloneTrajectorySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectorySlice(dst, src []Trajectory) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectoryTypeSupport types.MessageTypeSupport = _TrajectoryTypeSupport{}

type _TrajectoryTypeSupport struct{}

func (t _TrajectoryTypeSupport) New() types.Message {
	return NewTrajectory()
}

func (t _TrajectoryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.fog_msgs__msg__Trajectory
	return (unsafe.Pointer)(C.fog_msgs__msg__Trajectory__create())
}

func (t _TrajectoryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.fog_msgs__msg__Trajectory__destroy((*C.fog_msgs__msg__Trajectory)(pointer_to_free))
}

func (t _TrajectoryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Trajectory)
	mem := (*C.fog_msgs__msg__Trajectory)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.priority = C.uint16_t(m.Priority)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.droneid), m.Droneid)
	geographic_msgs_msg.GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.datum), &m.Datum)
	cSlice_path := mem.path[:]
	geometry_msgs_msg.Point__Array_to_C(*(*[]geometry_msgs_msg.CPoint)(unsafe.Pointer(&cSlice_path)), m.Path[:])
}

func (t _TrajectoryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Trajectory)
	mem := (*C.fog_msgs__msg__Trajectory)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Priority = uint16(mem.priority)
	primitives.StringAsGoStruct(&m.Droneid, unsafe.Pointer(&mem.droneid))
	geographic_msgs_msg.GeoPointTypeSupport.AsGoStruct(&m.Datum, unsafe.Pointer(&mem.datum))
	cSlice_path := mem.path[:]
	geometry_msgs_msg.Point__Array_to_Go(m.Path[:], *(*[]geometry_msgs_msg.CPoint)(unsafe.Pointer(&cSlice_path)))
}

func (t _TrajectoryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__fog_msgs__msg__Trajectory())
}

type CTrajectory = C.fog_msgs__msg__Trajectory
type CTrajectory__Sequence = C.fog_msgs__msg__Trajectory__Sequence

func Trajectory__Sequence_to_Go(goSlice *[]Trajectory, cSlice CTrajectory__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Trajectory, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.fog_msgs__msg__Trajectory__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__Trajectory * uintptr(i)),
		))
		TrajectoryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Trajectory__Sequence_to_C(cSlice *CTrajectory__Sequence, goSlice []Trajectory) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.fog_msgs__msg__Trajectory)(C.malloc((C.size_t)(C.sizeof_struct_fog_msgs__msg__Trajectory * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.fog_msgs__msg__Trajectory)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_fog_msgs__msg__Trajectory * uintptr(i)),
		))
		TrajectoryTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Trajectory__Array_to_Go(goSlice []Trajectory, cSlice []CTrajectory) {
	for i := 0; i < len(cSlice); i++ {
		TrajectoryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Trajectory__Array_to_C(cSlice []CTrajectory, goSlice []Trajectory) {
	for i := 0; i < len(goSlice); i++ {
		TrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
