/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rosgraph_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/tiiuae/rclgo-msgs/builtin_interfaces/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrosgraph_msgs__rosidl_typesupport_c -lrosgraph_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rosgraph_msgs/msg/clock.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rosgraph_msgs/Clock", ClockTypeSupport)
}

// Do not create instances of this type directly. Always use NewClock
// function instead.
type Clock struct {
	Clock builtin_interfaces_msg.Time `yaml:"clock"`// This message communicates the current time.For more information, see https://design.ros2.org/articles/clock_and_time.html.
}

// NewClock creates a new Clock with default values.
func NewClock() *Clock {
	self := Clock{}
	self.SetDefaults()
	return &self
}

func (t *Clock) Clone() *Clock {
	c := &Clock{}
	c.Clock = *t.Clock.Clone()
	return c
}

func (t *Clock) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Clock) SetDefaults() {
	t.Clock.SetDefaults()
}

// CloneClockSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneClockSlice(dst, src []Clock) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ClockTypeSupport types.MessageTypeSupport = _ClockTypeSupport{}

type _ClockTypeSupport struct{}

func (t _ClockTypeSupport) New() types.Message {
	return NewClock()
}

func (t _ClockTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rosgraph_msgs__msg__Clock
	return (unsafe.Pointer)(C.rosgraph_msgs__msg__Clock__create())
}

func (t _ClockTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rosgraph_msgs__msg__Clock__destroy((*C.rosgraph_msgs__msg__Clock)(pointer_to_free))
}

func (t _ClockTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Clock)
	mem := (*C.rosgraph_msgs__msg__Clock)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.clock), &m.Clock)
}

func (t _ClockTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Clock)
	mem := (*C.rosgraph_msgs__msg__Clock)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Clock, unsafe.Pointer(&mem.clock))
}

func (t _ClockTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rosgraph_msgs__msg__Clock())
}

type CClock = C.rosgraph_msgs__msg__Clock
type CClock__Sequence = C.rosgraph_msgs__msg__Clock__Sequence

func Clock__Sequence_to_Go(goSlice *[]Clock, cSlice CClock__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Clock, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rosgraph_msgs__msg__Clock__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rosgraph_msgs__msg__Clock * uintptr(i)),
		))
		ClockTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Clock__Sequence_to_C(cSlice *CClock__Sequence, goSlice []Clock) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rosgraph_msgs__msg__Clock)(C.malloc((C.size_t)(C.sizeof_struct_rosgraph_msgs__msg__Clock * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rosgraph_msgs__msg__Clock)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rosgraph_msgs__msg__Clock * uintptr(i)),
		))
		ClockTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Clock__Array_to_Go(goSlice []Clock, cSlice []CClock) {
	for i := 0; i < len(cSlice); i++ {
		ClockTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Clock__Array_to_C(cSlice []CClock, goSlice []Clock) {
	for i := 0; i < len(goSlice); i++ {
		ClockTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
