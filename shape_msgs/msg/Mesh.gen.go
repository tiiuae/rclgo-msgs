/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package shape_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lshape_msgs__rosidl_typesupport_c -lshape_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <shape_msgs/msg/mesh.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("shape_msgs/Mesh", MeshTypeSupport)
}

// Do not create instances of this type directly. Always use NewMesh
// function instead.
type Mesh struct {
	Triangles []MeshTriangle `yaml:"triangles"`// List of triangles; the index values refer to positions in vertices[].
	Vertices []geometry_msgs_msg.Point `yaml:"vertices"`// The actual vertices that make up the mesh.
}

// NewMesh creates a new Mesh with default values.
func NewMesh() *Mesh {
	self := Mesh{}
	self.SetDefaults()
	return &self
}

func (t *Mesh) Clone() *Mesh {
	c := &Mesh{}
	if t.Triangles != nil {
		c.Triangles = make([]MeshTriangle, len(t.Triangles))
		CloneMeshTriangleSlice(c.Triangles, t.Triangles)
	}
	if t.Vertices != nil {
		c.Vertices = make([]geometry_msgs_msg.Point, len(t.Vertices))
		geometry_msgs_msg.ClonePointSlice(c.Vertices, t.Vertices)
	}
	return c
}

func (t *Mesh) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Mesh) SetDefaults() {
	t.Triangles = nil
	t.Vertices = nil
}

// CloneMeshSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMeshSlice(dst, src []Mesh) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MeshTypeSupport types.MessageTypeSupport = _MeshTypeSupport{}

type _MeshTypeSupport struct{}

func (t _MeshTypeSupport) New() types.Message {
	return NewMesh()
}

func (t _MeshTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.shape_msgs__msg__Mesh
	return (unsafe.Pointer)(C.shape_msgs__msg__Mesh__create())
}

func (t _MeshTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.shape_msgs__msg__Mesh__destroy((*C.shape_msgs__msg__Mesh)(pointer_to_free))
}

func (t _MeshTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Mesh)
	mem := (*C.shape_msgs__msg__Mesh)(dst)
	MeshTriangle__Sequence_to_C(&mem.triangles, m.Triangles)
	geometry_msgs_msg.Point__Sequence_to_C((*geometry_msgs_msg.CPoint__Sequence)(unsafe.Pointer(&mem.vertices)), m.Vertices)
}

func (t _MeshTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Mesh)
	mem := (*C.shape_msgs__msg__Mesh)(ros2_message_buffer)
	MeshTriangle__Sequence_to_Go(&m.Triangles, mem.triangles)
	geometry_msgs_msg.Point__Sequence_to_Go(&m.Vertices, *(*geometry_msgs_msg.CPoint__Sequence)(unsafe.Pointer(&mem.vertices)))
}

func (t _MeshTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__shape_msgs__msg__Mesh())
}

type CMesh = C.shape_msgs__msg__Mesh
type CMesh__Sequence = C.shape_msgs__msg__Mesh__Sequence

func Mesh__Sequence_to_Go(goSlice *[]Mesh, cSlice CMesh__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Mesh, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.shape_msgs__msg__Mesh__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_shape_msgs__msg__Mesh * uintptr(i)),
		))
		MeshTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Mesh__Sequence_to_C(cSlice *CMesh__Sequence, goSlice []Mesh) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.shape_msgs__msg__Mesh)(C.malloc((C.size_t)(C.sizeof_struct_shape_msgs__msg__Mesh * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.shape_msgs__msg__Mesh)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_shape_msgs__msg__Mesh * uintptr(i)),
		))
		MeshTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Mesh__Array_to_Go(goSlice []Mesh, cSlice []CMesh) {
	for i := 0; i < len(cSlice); i++ {
		MeshTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Mesh__Array_to_C(cSlice []CMesh, goSlice []Mesh) {
	for i := 0; i < len(goSlice); i++ {
		MeshTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
