/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package lifecycle_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	lifecycle_msgs_msg "github.com/tiiuae/rclgo-msgs/lifecycle_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -llifecycle_msgs__rosidl_typesupport_c -llifecycle_msgs__rosidl_generator_c
#cgo LDFLAGS: -llifecycle_msgs__rosidl_typesupport_c -llifecycle_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <lifecycle_msgs/srv/get_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("lifecycle_msgs/GetState_Response", GetState_ResponseTypeSupport)
}

// Do not create instances of this type directly. Always use NewGetState_Response
// function instead.
type GetState_Response struct {
	CurrentState lifecycle_msgs_msg.State `yaml:"current_state"`// The current state-machine state of the node.
}

// NewGetState_Response creates a new GetState_Response with default values.
func NewGetState_Response() *GetState_Response {
	self := GetState_Response{}
	self.SetDefaults()
	return &self
}

func (t *GetState_Response) Clone() *GetState_Response {
	c := &GetState_Response{}
	c.CurrentState = *t.CurrentState.Clone()
	return c
}

func (t *GetState_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GetState_Response) SetDefaults() {
	t.CurrentState.SetDefaults()
}

// CloneGetState_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGetState_ResponseSlice(dst, src []GetState_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GetState_ResponseTypeSupport types.MessageTypeSupport = _GetState_ResponseTypeSupport{}

type _GetState_ResponseTypeSupport struct{}

func (t _GetState_ResponseTypeSupport) New() types.Message {
	return NewGetState_Response()
}

func (t _GetState_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.lifecycle_msgs__srv__GetState_Response
	return (unsafe.Pointer)(C.lifecycle_msgs__srv__GetState_Response__create())
}

func (t _GetState_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.lifecycle_msgs__srv__GetState_Response__destroy((*C.lifecycle_msgs__srv__GetState_Response)(pointer_to_free))
}

func (t _GetState_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GetState_Response)
	mem := (*C.lifecycle_msgs__srv__GetState_Response)(dst)
	lifecycle_msgs_msg.StateTypeSupport.AsCStruct(unsafe.Pointer(&mem.current_state), &m.CurrentState)
}

func (t _GetState_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GetState_Response)
	mem := (*C.lifecycle_msgs__srv__GetState_Response)(ros2_message_buffer)
	lifecycle_msgs_msg.StateTypeSupport.AsGoStruct(&m.CurrentState, unsafe.Pointer(&mem.current_state))
}

func (t _GetState_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__lifecycle_msgs__srv__GetState_Response())
}

type CGetState_Response = C.lifecycle_msgs__srv__GetState_Response
type CGetState_Response__Sequence = C.lifecycle_msgs__srv__GetState_Response__Sequence

func GetState_Response__Sequence_to_Go(goSlice *[]GetState_Response, cSlice CGetState_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GetState_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.lifecycle_msgs__srv__GetState_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_lifecycle_msgs__srv__GetState_Response * uintptr(i)),
		))
		GetState_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func GetState_Response__Sequence_to_C(cSlice *CGetState_Response__Sequence, goSlice []GetState_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.lifecycle_msgs__srv__GetState_Response)(C.malloc((C.size_t)(C.sizeof_struct_lifecycle_msgs__srv__GetState_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.lifecycle_msgs__srv__GetState_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_lifecycle_msgs__srv__GetState_Response * uintptr(i)),
		))
		GetState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func GetState_Response__Array_to_Go(goSlice []GetState_Response, cSlice []CGetState_Response) {
	for i := 0; i < len(cSlice); i++ {
		GetState_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GetState_Response__Array_to_C(cSlice []CGetState_Response, goSlice []GetState_Response) {
	for i := 0; i < len(goSlice); i++ {
		GetState_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
