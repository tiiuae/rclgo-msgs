/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package map_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lmap_msgs__rosidl_typesupport_c -lmap_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <map_msgs/msg/occupancy_grid_update.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("map_msgs/OccupancyGridUpdate", OccupancyGridUpdateTypeSupport)
}

// Do not create instances of this type directly. Always use NewOccupancyGridUpdate
// function instead.
type OccupancyGridUpdate struct {
	Header std_msgs_msg.Header `yaml:"header"`
	X int32 `yaml:"x"`
	Y int32 `yaml:"y"`
	Width uint32 `yaml:"width"`
	Height uint32 `yaml:"height"`
	Data []int8 `yaml:"data"`
}

// NewOccupancyGridUpdate creates a new OccupancyGridUpdate with default values.
func NewOccupancyGridUpdate() *OccupancyGridUpdate {
	self := OccupancyGridUpdate{}
	self.SetDefaults()
	return &self
}

func (t *OccupancyGridUpdate) Clone() *OccupancyGridUpdate {
	c := &OccupancyGridUpdate{}
	c.Header = *t.Header.Clone()
	c.X = t.X
	c.Y = t.Y
	c.Width = t.Width
	c.Height = t.Height
	if t.Data != nil {
		c.Data = make([]int8, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *OccupancyGridUpdate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OccupancyGridUpdate) SetDefaults() {
	t.Header.SetDefaults()
	t.X = 0
	t.Y = 0
	t.Width = 0
	t.Height = 0
	t.Data = nil
}

// CloneOccupancyGridUpdateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOccupancyGridUpdateSlice(dst, src []OccupancyGridUpdate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OccupancyGridUpdateTypeSupport types.MessageTypeSupport = _OccupancyGridUpdateTypeSupport{}

type _OccupancyGridUpdateTypeSupport struct{}

func (t _OccupancyGridUpdateTypeSupport) New() types.Message {
	return NewOccupancyGridUpdate()
}

func (t _OccupancyGridUpdateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.map_msgs__msg__OccupancyGridUpdate
	return (unsafe.Pointer)(C.map_msgs__msg__OccupancyGridUpdate__create())
}

func (t _OccupancyGridUpdateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.map_msgs__msg__OccupancyGridUpdate__destroy((*C.map_msgs__msg__OccupancyGridUpdate)(pointer_to_free))
}

func (t _OccupancyGridUpdateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OccupancyGridUpdate)
	mem := (*C.map_msgs__msg__OccupancyGridUpdate)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.x = C.int32_t(m.X)
	mem.y = C.int32_t(m.Y)
	mem.width = C.uint32_t(m.Width)
	mem.height = C.uint32_t(m.Height)
	primitives.Int8__Sequence_to_C((*primitives.CInt8__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _OccupancyGridUpdateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OccupancyGridUpdate)
	mem := (*C.map_msgs__msg__OccupancyGridUpdate)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.X = int32(mem.x)
	m.Y = int32(mem.y)
	m.Width = uint32(mem.width)
	m.Height = uint32(mem.height)
	primitives.Int8__Sequence_to_Go(&m.Data, *(*primitives.CInt8__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _OccupancyGridUpdateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__map_msgs__msg__OccupancyGridUpdate())
}

type COccupancyGridUpdate = C.map_msgs__msg__OccupancyGridUpdate
type COccupancyGridUpdate__Sequence = C.map_msgs__msg__OccupancyGridUpdate__Sequence

func OccupancyGridUpdate__Sequence_to_Go(goSlice *[]OccupancyGridUpdate, cSlice COccupancyGridUpdate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OccupancyGridUpdate, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.map_msgs__msg__OccupancyGridUpdate__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * uintptr(i)),
		))
		OccupancyGridUpdateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func OccupancyGridUpdate__Sequence_to_C(cSlice *COccupancyGridUpdate__Sequence, goSlice []OccupancyGridUpdate) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.map_msgs__msg__OccupancyGridUpdate)(C.malloc((C.size_t)(C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.map_msgs__msg__OccupancyGridUpdate)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_map_msgs__msg__OccupancyGridUpdate * uintptr(i)),
		))
		OccupancyGridUpdateTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func OccupancyGridUpdate__Array_to_Go(goSlice []OccupancyGridUpdate, cSlice []COccupancyGridUpdate) {
	for i := 0; i < len(cSlice); i++ {
		OccupancyGridUpdateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OccupancyGridUpdate__Array_to_C(cSlice []COccupancyGridUpdate, goSlice []OccupancyGridUpdate) {
	for i := 0; i < len(goSlice); i++ {
		OccupancyGridUpdateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
