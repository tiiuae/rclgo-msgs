/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package statistics_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/tiiuae/rclgo-msgs/builtin_interfaces/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lstatistics_msgs__rosidl_typesupport_c -lstatistics_msgs__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <statistics_msgs/msg/metrics_message.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("statistics_msgs/MetricsMessage", MetricsMessageTypeSupport)
}

// Do not create instances of this type directly. Always use NewMetricsMessage
// function instead.
type MetricsMessage struct {
	MeasurementSourceName string `yaml:"measurement_source_name"`// Name metric measurement source, e.g., node, topic, or process name
	MetricsSource string `yaml:"metrics_source"`// Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.
	Unit string `yaml:"unit"`// Unit of measure of the metric, e.g. percent, mb, seconds, etc.
	WindowStart builtin_interfaces_msg.Time `yaml:"window_start"`// Measurement window start time
	WindowStop builtin_interfaces_msg.Time `yaml:"window_stop"`// Measurement window end time
	Statistics []StatisticDataPoint `yaml:"statistics"`// A list of statistics data point, defined in StatisticDataPoint.msg
}

// NewMetricsMessage creates a new MetricsMessage with default values.
func NewMetricsMessage() *MetricsMessage {
	self := MetricsMessage{}
	self.SetDefaults()
	return &self
}

func (t *MetricsMessage) Clone() *MetricsMessage {
	c := &MetricsMessage{}
	c.MeasurementSourceName = t.MeasurementSourceName
	c.MetricsSource = t.MetricsSource
	c.Unit = t.Unit
	c.WindowStart = *t.WindowStart.Clone()
	c.WindowStop = *t.WindowStop.Clone()
	if t.Statistics != nil {
		c.Statistics = make([]StatisticDataPoint, len(t.Statistics))
		CloneStatisticDataPointSlice(c.Statistics, t.Statistics)
	}
	return c
}

func (t *MetricsMessage) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MetricsMessage) SetDefaults() {
	t.MeasurementSourceName = ""
	t.MetricsSource = ""
	t.Unit = ""
	t.WindowStart.SetDefaults()
	t.WindowStop.SetDefaults()
	t.Statistics = nil
}

// CloneMetricsMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMetricsMessageSlice(dst, src []MetricsMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MetricsMessageTypeSupport types.MessageTypeSupport = _MetricsMessageTypeSupport{}

type _MetricsMessageTypeSupport struct{}

func (t _MetricsMessageTypeSupport) New() types.Message {
	return NewMetricsMessage()
}

func (t _MetricsMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.statistics_msgs__msg__MetricsMessage
	return (unsafe.Pointer)(C.statistics_msgs__msg__MetricsMessage__create())
}

func (t _MetricsMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.statistics_msgs__msg__MetricsMessage__destroy((*C.statistics_msgs__msg__MetricsMessage)(pointer_to_free))
}

func (t _MetricsMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MetricsMessage)
	mem := (*C.statistics_msgs__msg__MetricsMessage)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.measurement_source_name), m.MeasurementSourceName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.metrics_source), m.MetricsSource)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.unit), m.Unit)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.window_start), &m.WindowStart)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.window_stop), &m.WindowStop)
	StatisticDataPoint__Sequence_to_C(&mem.statistics, m.Statistics)
}

func (t _MetricsMessageTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MetricsMessage)
	mem := (*C.statistics_msgs__msg__MetricsMessage)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.MeasurementSourceName, unsafe.Pointer(&mem.measurement_source_name))
	primitives.StringAsGoStruct(&m.MetricsSource, unsafe.Pointer(&mem.metrics_source))
	primitives.StringAsGoStruct(&m.Unit, unsafe.Pointer(&mem.unit))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.WindowStart, unsafe.Pointer(&mem.window_start))
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.WindowStop, unsafe.Pointer(&mem.window_stop))
	StatisticDataPoint__Sequence_to_Go(&m.Statistics, mem.statistics)
}

func (t _MetricsMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__statistics_msgs__msg__MetricsMessage())
}

type CMetricsMessage = C.statistics_msgs__msg__MetricsMessage
type CMetricsMessage__Sequence = C.statistics_msgs__msg__MetricsMessage__Sequence

func MetricsMessage__Sequence_to_Go(goSlice *[]MetricsMessage, cSlice CMetricsMessage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MetricsMessage, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.statistics_msgs__msg__MetricsMessage__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_statistics_msgs__msg__MetricsMessage * uintptr(i)),
		))
		MetricsMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func MetricsMessage__Sequence_to_C(cSlice *CMetricsMessage__Sequence, goSlice []MetricsMessage) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.statistics_msgs__msg__MetricsMessage)(C.malloc((C.size_t)(C.sizeof_struct_statistics_msgs__msg__MetricsMessage * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.statistics_msgs__msg__MetricsMessage)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_statistics_msgs__msg__MetricsMessage * uintptr(i)),
		))
		MetricsMessageTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func MetricsMessage__Array_to_Go(goSlice []MetricsMessage, cSlice []CMetricsMessage) {
	for i := 0; i < len(cSlice); i++ {
		MetricsMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MetricsMessage__Array_to_C(cSlice []CMetricsMessage, goSlice []MetricsMessage) {
	for i := 0; i < len(goSlice); i++ {
		MetricsMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
