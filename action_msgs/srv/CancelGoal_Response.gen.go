/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package action_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	action_msgs_msg "github.com/tiiuae/rclgo-msgs/action_msgs/msg"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -laction_msgs__rosidl_typesupport_c -laction_msgs__rosidl_generator_c
#cgo LDFLAGS: -laction_msgs__rosidl_typesupport_c -laction_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <action_msgs/srv/cancel_goal.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("action_msgs/CancelGoal_Response", CancelGoal_ResponseTypeSupport)
}
const (
	CancelGoal_Response_ERROR_NONE int8 = 0// Indicates the request was accepted without any errors.One or more goals have transitioned to the CANCELING state. Thegoals_canceling list is not empty.
	CancelGoal_Response_ERROR_REJECTED int8 = 1// Indicates the request was rejected.No goals have transitioned to the CANCELING state. The goals_canceling list isempty.
	CancelGoal_Response_ERROR_UNKNOWN_GOAL_ID int8 = 2// Indicates the requested goal ID does not exist.No goals have transitioned to the CANCELING state. The goals_canceling list isempty.
	CancelGoal_Response_ERROR_GOAL_TERMINATED int8 = 3// Indicates the goal is not cancelable because it is already in a terminal state.No goals have transitioned to the CANCELING state. The goals_canceling list isempty.
)

// Do not create instances of this type directly. Always use NewCancelGoal_Response
// function instead.
type CancelGoal_Response struct {
	ReturnCode int8 `yaml:"return_code"`// Return code, see above definitions.
	GoalsCanceling []action_msgs_msg.GoalInfo `yaml:"goals_canceling"`// Goals that accepted the cancel request.
}

// NewCancelGoal_Response creates a new CancelGoal_Response with default values.
func NewCancelGoal_Response() *CancelGoal_Response {
	self := CancelGoal_Response{}
	self.SetDefaults()
	return &self
}

func (t *CancelGoal_Response) Clone() *CancelGoal_Response {
	c := &CancelGoal_Response{}
	c.ReturnCode = t.ReturnCode
	if t.GoalsCanceling != nil {
		c.GoalsCanceling = make([]action_msgs_msg.GoalInfo, len(t.GoalsCanceling))
		action_msgs_msg.CloneGoalInfoSlice(c.GoalsCanceling, t.GoalsCanceling)
	}
	return c
}

func (t *CancelGoal_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CancelGoal_Response) SetDefaults() {
	t.ReturnCode = 0
	t.GoalsCanceling = nil
}

// CloneCancelGoal_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCancelGoal_ResponseSlice(dst, src []CancelGoal_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CancelGoal_ResponseTypeSupport types.MessageTypeSupport = _CancelGoal_ResponseTypeSupport{}

type _CancelGoal_ResponseTypeSupport struct{}

func (t _CancelGoal_ResponseTypeSupport) New() types.Message {
	return NewCancelGoal_Response()
}

func (t _CancelGoal_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.action_msgs__srv__CancelGoal_Response
	return (unsafe.Pointer)(C.action_msgs__srv__CancelGoal_Response__create())
}

func (t _CancelGoal_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.action_msgs__srv__CancelGoal_Response__destroy((*C.action_msgs__srv__CancelGoal_Response)(pointer_to_free))
}

func (t _CancelGoal_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CancelGoal_Response)
	mem := (*C.action_msgs__srv__CancelGoal_Response)(dst)
	mem.return_code = C.int8_t(m.ReturnCode)
	action_msgs_msg.GoalInfo__Sequence_to_C((*action_msgs_msg.CGoalInfo__Sequence)(unsafe.Pointer(&mem.goals_canceling)), m.GoalsCanceling)
}

func (t _CancelGoal_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CancelGoal_Response)
	mem := (*C.action_msgs__srv__CancelGoal_Response)(ros2_message_buffer)
	m.ReturnCode = int8(mem.return_code)
	action_msgs_msg.GoalInfo__Sequence_to_Go(&m.GoalsCanceling, *(*action_msgs_msg.CGoalInfo__Sequence)(unsafe.Pointer(&mem.goals_canceling)))
}

func (t _CancelGoal_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__action_msgs__srv__CancelGoal_Response())
}

type CCancelGoal_Response = C.action_msgs__srv__CancelGoal_Response
type CCancelGoal_Response__Sequence = C.action_msgs__srv__CancelGoal_Response__Sequence

func CancelGoal_Response__Sequence_to_Go(goSlice *[]CancelGoal_Response, cSlice CCancelGoal_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CancelGoal_Response, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.action_msgs__srv__CancelGoal_Response__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_action_msgs__srv__CancelGoal_Response * uintptr(i)),
		))
		CancelGoal_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func CancelGoal_Response__Sequence_to_C(cSlice *CCancelGoal_Response__Sequence, goSlice []CancelGoal_Response) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.action_msgs__srv__CancelGoal_Response)(C.malloc((C.size_t)(C.sizeof_struct_action_msgs__srv__CancelGoal_Response * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.action_msgs__srv__CancelGoal_Response)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_action_msgs__srv__CancelGoal_Response * uintptr(i)),
		))
		CancelGoal_ResponseTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func CancelGoal_Response__Array_to_Go(goSlice []CancelGoal_Response, cSlice []CCancelGoal_Response) {
	for i := 0; i < len(cSlice); i++ {
		CancelGoal_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CancelGoal_Response__Array_to_C(cSlice []CCancelGoal_Response, goSlice []CancelGoal_Response) {
	for i := 0; i < len(goSlice); i++ {
		CancelGoal_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
