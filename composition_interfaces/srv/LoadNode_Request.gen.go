/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package composition_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/tiiuae/rclgo-msgs/rcl_interfaces/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lcomposition_interfaces__rosidl_typesupport_c -lcomposition_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <composition_interfaces/srv/load_node.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("composition_interfaces/LoadNode_Request", LoadNode_RequestTypeSupport)
}

// Do not create instances of this type directly. Always use NewLoadNode_Request
// function instead.
type LoadNode_Request struct {
	PackageName string `yaml:"package_name"`// The ROS package in which the composable node can be found.
	PluginName string `yaml:"plugin_name"`// A plugin within the ROS package "package_name".
	NodeName string `yaml:"node_name"`// The assigned name of the composable node. Leave empty to use the node'sdefault name.
	NodeNamespace string `yaml:"node_namespace"`// The assigned namespace of the composable node. Leave empty to use the node'sdefault namespace.
	LogLevel uint8 `yaml:"log_level"`// The assigned log level of the composable node. Enum values are found inmessage rcl_interfaces/Log.
	RemapRules []string `yaml:"remap_rules"`// Remapping rules for this composable node.For more info about static_remapping rules and their syntax, seehttps://design.ros2.org/articles/static_remapping.htmlTODO(sloretz) rcl_interfaces message for remap rules?
	Parameters []rcl_interfaces_msg.Parameter `yaml:"parameters"`// The Parameters of this composable node to set.
	ExtraArguments []rcl_interfaces_msg.Parameter `yaml:"extra_arguments"`// key/value arguments that are specific to a type of container process.
}

// NewLoadNode_Request creates a new LoadNode_Request with default values.
func NewLoadNode_Request() *LoadNode_Request {
	self := LoadNode_Request{}
	self.SetDefaults()
	return &self
}

func (t *LoadNode_Request) Clone() *LoadNode_Request {
	c := &LoadNode_Request{}
	c.PackageName = t.PackageName
	c.PluginName = t.PluginName
	c.NodeName = t.NodeName
	c.NodeNamespace = t.NodeNamespace
	c.LogLevel = t.LogLevel
	if t.RemapRules != nil {
		c.RemapRules = make([]string, len(t.RemapRules))
		copy(c.RemapRules, t.RemapRules)
	}
	if t.Parameters != nil {
		c.Parameters = make([]rcl_interfaces_msg.Parameter, len(t.Parameters))
		rcl_interfaces_msg.CloneParameterSlice(c.Parameters, t.Parameters)
	}
	if t.ExtraArguments != nil {
		c.ExtraArguments = make([]rcl_interfaces_msg.Parameter, len(t.ExtraArguments))
		rcl_interfaces_msg.CloneParameterSlice(c.ExtraArguments, t.ExtraArguments)
	}
	return c
}

func (t *LoadNode_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LoadNode_Request) SetDefaults() {
	t.PackageName = ""
	t.PluginName = ""
	t.NodeName = ""
	t.NodeNamespace = ""
	t.LogLevel = 0
	t.RemapRules = nil
	t.Parameters = nil
	t.ExtraArguments = nil
}

// CloneLoadNode_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLoadNode_RequestSlice(dst, src []LoadNode_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LoadNode_RequestTypeSupport types.MessageTypeSupport = _LoadNode_RequestTypeSupport{}

type _LoadNode_RequestTypeSupport struct{}

func (t _LoadNode_RequestTypeSupport) New() types.Message {
	return NewLoadNode_Request()
}

func (t _LoadNode_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.composition_interfaces__srv__LoadNode_Request
	return (unsafe.Pointer)(C.composition_interfaces__srv__LoadNode_Request__create())
}

func (t _LoadNode_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.composition_interfaces__srv__LoadNode_Request__destroy((*C.composition_interfaces__srv__LoadNode_Request)(pointer_to_free))
}

func (t _LoadNode_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LoadNode_Request)
	mem := (*C.composition_interfaces__srv__LoadNode_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.package_name), m.PackageName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.plugin_name), m.PluginName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.node_name), m.NodeName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.node_namespace), m.NodeNamespace)
	mem.log_level = C.uint8_t(m.LogLevel)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.remap_rules)), m.RemapRules)
	rcl_interfaces_msg.Parameter__Sequence_to_C((*rcl_interfaces_msg.CParameter__Sequence)(unsafe.Pointer(&mem.parameters)), m.Parameters)
	rcl_interfaces_msg.Parameter__Sequence_to_C((*rcl_interfaces_msg.CParameter__Sequence)(unsafe.Pointer(&mem.extra_arguments)), m.ExtraArguments)
}

func (t _LoadNode_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LoadNode_Request)
	mem := (*C.composition_interfaces__srv__LoadNode_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.PackageName, unsafe.Pointer(&mem.package_name))
	primitives.StringAsGoStruct(&m.PluginName, unsafe.Pointer(&mem.plugin_name))
	primitives.StringAsGoStruct(&m.NodeName, unsafe.Pointer(&mem.node_name))
	primitives.StringAsGoStruct(&m.NodeNamespace, unsafe.Pointer(&mem.node_namespace))
	m.LogLevel = uint8(mem.log_level)
	primitives.String__Sequence_to_Go(&m.RemapRules, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.remap_rules)))
	rcl_interfaces_msg.Parameter__Sequence_to_Go(&m.Parameters, *(*rcl_interfaces_msg.CParameter__Sequence)(unsafe.Pointer(&mem.parameters)))
	rcl_interfaces_msg.Parameter__Sequence_to_Go(&m.ExtraArguments, *(*rcl_interfaces_msg.CParameter__Sequence)(unsafe.Pointer(&mem.extra_arguments)))
}

func (t _LoadNode_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__composition_interfaces__srv__LoadNode_Request())
}

type CLoadNode_Request = C.composition_interfaces__srv__LoadNode_Request
type CLoadNode_Request__Sequence = C.composition_interfaces__srv__LoadNode_Request__Sequence

func LoadNode_Request__Sequence_to_Go(goSlice *[]LoadNode_Request, cSlice CLoadNode_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LoadNode_Request, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.composition_interfaces__srv__LoadNode_Request__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_composition_interfaces__srv__LoadNode_Request * uintptr(i)),
		))
		LoadNode_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func LoadNode_Request__Sequence_to_C(cSlice *CLoadNode_Request__Sequence, goSlice []LoadNode_Request) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.composition_interfaces__srv__LoadNode_Request)(C.malloc((C.size_t)(C.sizeof_struct_composition_interfaces__srv__LoadNode_Request * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.composition_interfaces__srv__LoadNode_Request)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_composition_interfaces__srv__LoadNode_Request * uintptr(i)),
		))
		LoadNode_RequestTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func LoadNode_Request__Array_to_Go(goSlice []LoadNode_Request, cSlice []CLoadNode_Request) {
	for i := 0; i < len(cSlice); i++ {
		LoadNode_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LoadNode_Request__Array_to_C(cSlice []CLoadNode_Request, goSlice []LoadNode_Request) {
	for i := 0; i < len(goSlice); i++ {
		LoadNode_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
