/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package geometry_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <geometry_msgs/msg/transform_stamped.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("geometry_msgs/TransformStamped", TransformStampedTypeSupport)
}

// Do not create instances of this type directly. Always use NewTransformStamped
// function instead.
type TransformStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`// The frame id in the header is used as the reference frame of this transform.
	ChildFrameId string `yaml:"child_frame_id"`// The frame id of the child frame to which this transform points.
	Transform Transform `yaml:"transform"`// Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.
}

// NewTransformStamped creates a new TransformStamped with default values.
func NewTransformStamped() *TransformStamped {
	self := TransformStamped{}
	self.SetDefaults()
	return &self
}

func (t *TransformStamped) Clone() *TransformStamped {
	c := &TransformStamped{}
	c.Header = *t.Header.Clone()
	c.ChildFrameId = t.ChildFrameId
	c.Transform = *t.Transform.Clone()
	return c
}

func (t *TransformStamped) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TransformStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.ChildFrameId = ""
	t.Transform.SetDefaults()
}

// CloneTransformStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTransformStampedSlice(dst, src []TransformStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TransformStampedTypeSupport types.MessageTypeSupport = _TransformStampedTypeSupport{}

type _TransformStampedTypeSupport struct{}

func (t _TransformStampedTypeSupport) New() types.Message {
	return NewTransformStamped()
}

func (t _TransformStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.geometry_msgs__msg__TransformStamped
	return (unsafe.Pointer)(C.geometry_msgs__msg__TransformStamped__create())
}

func (t _TransformStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.geometry_msgs__msg__TransformStamped__destroy((*C.geometry_msgs__msg__TransformStamped)(pointer_to_free))
}

func (t _TransformStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TransformStamped)
	mem := (*C.geometry_msgs__msg__TransformStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.child_frame_id), m.ChildFrameId)
	TransformTypeSupport.AsCStruct(unsafe.Pointer(&mem.transform), &m.Transform)
}

func (t _TransformStampedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TransformStamped)
	mem := (*C.geometry_msgs__msg__TransformStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.ChildFrameId, unsafe.Pointer(&mem.child_frame_id))
	TransformTypeSupport.AsGoStruct(&m.Transform, unsafe.Pointer(&mem.transform))
}

func (t _TransformStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__TransformStamped())
}

type CTransformStamped = C.geometry_msgs__msg__TransformStamped
type CTransformStamped__Sequence = C.geometry_msgs__msg__TransformStamped__Sequence

func TransformStamped__Sequence_to_Go(goSlice *[]TransformStamped, cSlice CTransformStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TransformStamped, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.geometry_msgs__msg__TransformStamped__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__TransformStamped * uintptr(i)),
		))
		TransformStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func TransformStamped__Sequence_to_C(cSlice *CTransformStamped__Sequence, goSlice []TransformStamped) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.geometry_msgs__msg__TransformStamped)(C.malloc((C.size_t)(C.sizeof_struct_geometry_msgs__msg__TransformStamped * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.geometry_msgs__msg__TransformStamped)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_geometry_msgs__msg__TransformStamped * uintptr(i)),
		))
		TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func TransformStamped__Array_to_Go(goSlice []TransformStamped, cSlice []CTransformStamped) {
	for i := 0; i < len(cSlice); i++ {
		TransformStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TransformStamped__Array_to_C(cSlice []CTransformStamped, goSlice []TransformStamped) {
	for i := 0; i < len(goSlice); i++ {
		TransformStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
