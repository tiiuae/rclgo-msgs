/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package visualization_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "github.com/tiiuae/rclgo-msgs/geometry_msgs/msg"
	std_msgs_msg "github.com/tiiuae/rclgo-msgs/std_msgs/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lvisualization_msgs__rosidl_typesupport_c -lvisualization_msgs__rosidl_generator_c
#cgo LDFLAGS: -lgeometry_msgs__rosidl_typesupport_c -lgeometry_msgs__rosidl_generator_c
#cgo LDFLAGS: -lstd_msgs__rosidl_typesupport_c -lstd_msgs__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <visualization_msgs/msg/interactive_marker_feedback.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("visualization_msgs/InteractiveMarkerFeedback", InteractiveMarkerFeedbackTypeSupport)
}
const (
	InteractiveMarkerFeedback_KEEP_ALIVE uint8 = 0// Type of the eventKEEP_ALIVE: sent while dragging to keep up control of the markerMENU_SELECT: a menu entry has been selectedBUTTON_CLICK: a button control has been clickedPOSE_UPDATE: the pose has been changed using one of the controls
	InteractiveMarkerFeedback_POSE_UPDATE uint8 = 1// Type of the eventKEEP_ALIVE: sent while dragging to keep up control of the markerMENU_SELECT: a menu entry has been selectedBUTTON_CLICK: a button control has been clickedPOSE_UPDATE: the pose has been changed using one of the controls
	InteractiveMarkerFeedback_MENU_SELECT uint8 = 2// Type of the eventKEEP_ALIVE: sent while dragging to keep up control of the markerMENU_SELECT: a menu entry has been selectedBUTTON_CLICK: a button control has been clickedPOSE_UPDATE: the pose has been changed using one of the controls
	InteractiveMarkerFeedback_BUTTON_CLICK uint8 = 3// Type of the eventKEEP_ALIVE: sent while dragging to keep up control of the markerMENU_SELECT: a menu entry has been selectedBUTTON_CLICK: a button control has been clickedPOSE_UPDATE: the pose has been changed using one of the controls
	InteractiveMarkerFeedback_MOUSE_DOWN uint8 = 4
	InteractiveMarkerFeedback_MOUSE_UP uint8 = 5
)

// Do not create instances of this type directly. Always use NewInteractiveMarkerFeedback
// function instead.
type InteractiveMarkerFeedback struct {
	Header std_msgs_msg.Header `yaml:"header"`// Time/frame info.
	ClientId string `yaml:"client_id"`// Identifying string. Must be unique in the topic namespace.
	MarkerName string `yaml:"marker_name"`// Specifies which interactive marker and control this message refers to
	ControlName string `yaml:"control_name"`// Specifies which interactive marker and control this message refers to
	EventType uint8 `yaml:"event_type"`
	Pose geometry_msgs_msg.Pose `yaml:"pose"`// Current pose of the markerNote: Has to be valid for all feedback types.
	MenuEntryId uint32 `yaml:"menu_entry_id"`// Contains the ID of the selected menu entryOnly valid for MENU_SELECT events.
	MousePoint geometry_msgs_msg.Point `yaml:"mouse_point"`// If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_pointmay contain the 3 dimensional position of the event on thecontrol.  If it does, mouse_point_valid will be true.  mouse_pointwill be relative to the frame listed in the header.
	MousePointValid bool `yaml:"mouse_point_valid"`// If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_pointmay contain the 3 dimensional position of the event on thecontrol.  If it does, mouse_point_valid will be true.  mouse_pointwill be relative to the frame listed in the header.
}

// NewInteractiveMarkerFeedback creates a new InteractiveMarkerFeedback with default values.
func NewInteractiveMarkerFeedback() *InteractiveMarkerFeedback {
	self := InteractiveMarkerFeedback{}
	self.SetDefaults()
	return &self
}

func (t *InteractiveMarkerFeedback) Clone() *InteractiveMarkerFeedback {
	c := &InteractiveMarkerFeedback{}
	c.Header = *t.Header.Clone()
	c.ClientId = t.ClientId
	c.MarkerName = t.MarkerName
	c.ControlName = t.ControlName
	c.EventType = t.EventType
	c.Pose = *t.Pose.Clone()
	c.MenuEntryId = t.MenuEntryId
	c.MousePoint = *t.MousePoint.Clone()
	c.MousePointValid = t.MousePointValid
	return c
}

func (t *InteractiveMarkerFeedback) CloneMsg() types.Message {
	return t.Clone()
}

func (t *InteractiveMarkerFeedback) SetDefaults() {
	t.Header.SetDefaults()
	t.ClientId = ""
	t.MarkerName = ""
	t.ControlName = ""
	t.EventType = 0
	t.Pose.SetDefaults()
	t.MenuEntryId = 0
	t.MousePoint.SetDefaults()
	t.MousePointValid = false
}

// CloneInteractiveMarkerFeedbackSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneInteractiveMarkerFeedbackSlice(dst, src []InteractiveMarkerFeedback) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var InteractiveMarkerFeedbackTypeSupport types.MessageTypeSupport = _InteractiveMarkerFeedbackTypeSupport{}

type _InteractiveMarkerFeedbackTypeSupport struct{}

func (t _InteractiveMarkerFeedbackTypeSupport) New() types.Message {
	return NewInteractiveMarkerFeedback()
}

func (t _InteractiveMarkerFeedbackTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.visualization_msgs__msg__InteractiveMarkerFeedback
	return (unsafe.Pointer)(C.visualization_msgs__msg__InteractiveMarkerFeedback__create())
}

func (t _InteractiveMarkerFeedbackTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.visualization_msgs__msg__InteractiveMarkerFeedback__destroy((*C.visualization_msgs__msg__InteractiveMarkerFeedback)(pointer_to_free))
}

func (t _InteractiveMarkerFeedbackTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*InteractiveMarkerFeedback)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.client_id), m.ClientId)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.marker_name), m.MarkerName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.control_name), m.ControlName)
	mem.event_type = C.uint8_t(m.EventType)
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	mem.menu_entry_id = C.uint32_t(m.MenuEntryId)
	geometry_msgs_msg.PointTypeSupport.AsCStruct(unsafe.Pointer(&mem.mouse_point), &m.MousePoint)
	mem.mouse_point_valid = C.bool(m.MousePointValid)
}

func (t _InteractiveMarkerFeedbackTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*InteractiveMarkerFeedback)
	mem := (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.ClientId, unsafe.Pointer(&mem.client_id))
	primitives.StringAsGoStruct(&m.MarkerName, unsafe.Pointer(&mem.marker_name))
	primitives.StringAsGoStruct(&m.ControlName, unsafe.Pointer(&mem.control_name))
	m.EventType = uint8(mem.event_type)
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	m.MenuEntryId = uint32(mem.menu_entry_id)
	geometry_msgs_msg.PointTypeSupport.AsGoStruct(&m.MousePoint, unsafe.Pointer(&mem.mouse_point))
	m.MousePointValid = bool(mem.mouse_point_valid)
}

func (t _InteractiveMarkerFeedbackTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__visualization_msgs__msg__InteractiveMarkerFeedback())
}

type CInteractiveMarkerFeedback = C.visualization_msgs__msg__InteractiveMarkerFeedback
type CInteractiveMarkerFeedback__Sequence = C.visualization_msgs__msg__InteractiveMarkerFeedback__Sequence

func InteractiveMarkerFeedback__Sequence_to_Go(goSlice *[]InteractiveMarkerFeedback, cSlice CInteractiveMarkerFeedback__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]InteractiveMarkerFeedback, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.visualization_msgs__msg__InteractiveMarkerFeedback__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerFeedback * uintptr(i)),
		))
		InteractiveMarkerFeedbackTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func InteractiveMarkerFeedback__Sequence_to_C(cSlice *CInteractiveMarkerFeedback__Sequence, goSlice []InteractiveMarkerFeedback) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(C.malloc((C.size_t)(C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerFeedback * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.visualization_msgs__msg__InteractiveMarkerFeedback)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_visualization_msgs__msg__InteractiveMarkerFeedback * uintptr(i)),
		))
		InteractiveMarkerFeedbackTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func InteractiveMarkerFeedback__Array_to_Go(goSlice []InteractiveMarkerFeedback, cSlice []CInteractiveMarkerFeedback) {
	for i := 0; i < len(cSlice); i++ {
		InteractiveMarkerFeedbackTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func InteractiveMarkerFeedback__Array_to_C(cSlice []CInteractiveMarkerFeedback, goSlice []InteractiveMarkerFeedback) {
	for i := 0; i < len(goSlice); i++ {
		InteractiveMarkerFeedbackTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
