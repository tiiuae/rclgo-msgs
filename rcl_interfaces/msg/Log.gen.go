/*
This file is part of rclgo

Copyright Â© 2021 Technology Innovation Institute, United Arab Emirates

Licensed under the Apache License, Version 2.0 (the "License");
	http://www.apache.org/licenses/LICENSE-2.0
*/

/*
THIS FILE IS AUTOGENERATED BY 'rclgo-gen generate'
*/

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "github.com/tiiuae/rclgo-msgs/builtin_interfaces/msg"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#cgo LDFLAGS: -L/opt/ros/galactic/lib -Wl,-rpath=/opt/ros/galactic/lib -lrcl -lrosidl_runtime_c -lrosidl_typesupport_c -lrcutils -lrmw_implementation
#cgo LDFLAGS: -lrcl_interfaces__rosidl_typesupport_c -lrcl_interfaces__rosidl_generator_c
#cgo LDFLAGS: -lbuiltin_interfaces__rosidl_typesupport_c -lbuiltin_interfaces__rosidl_generator_c

#cgo CFLAGS: -I/opt/ros/galactic/include

#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/log.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/Log", LogTypeSupport)
}
const (
	Log_DEBUG byte = 10// Debug is for pedantic information, which is useful when debugging issues.
	Log_INFO byte = 20// Info is the standard informational level and is used to report expectedinformation.
	Log_WARN byte = 30// Warning is for information that may potentially cause issues or possibly unexpectedbehavior.
	Log_ERROR byte = 40// Error is for information that this node cannot resolve.
	Log_FATAL byte = 50// Information about a impending node shutdown.
)

// Do not create instances of this type directly. Always use NewLog
// function instead.
type Log struct {
	Stamp builtin_interfaces_msg.Time `yaml:"stamp"`// Timestamp when this message was generated by the node.
	Level uint8 `yaml:"level"`// Corresponding log level, see above definitions.
	Name string `yaml:"name"`// The name representing the logger this message came from.
	Msg string `yaml:"msg"`// The full log message.
	File string `yaml:"file"`// The file the message came from.
	Function string `yaml:"function"`// The function the message came from.
	Line uint32 `yaml:"line"`// The line in the file the message came from.
}

// NewLog creates a new Log with default values.
func NewLog() *Log {
	self := Log{}
	self.SetDefaults()
	return &self
}

func (t *Log) Clone() *Log {
	c := &Log{}
	c.Stamp = *t.Stamp.Clone()
	c.Level = t.Level
	c.Name = t.Name
	c.Msg = t.Msg
	c.File = t.File
	c.Function = t.Function
	c.Line = t.Line
	return c
}

func (t *Log) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Log) SetDefaults() {
	t.Stamp.SetDefaults()
	t.Level = 0
	t.Name = ""
	t.Msg = ""
	t.File = ""
	t.Function = ""
	t.Line = 0
}

// CloneLogSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLogSlice(dst, src []Log) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LogTypeSupport types.MessageTypeSupport = _LogTypeSupport{}

type _LogTypeSupport struct{}

func (t _LogTypeSupport) New() types.Message {
	return NewLog()
}

func (t _LogTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__Log
	return (unsafe.Pointer)(C.rcl_interfaces__msg__Log__create())
}

func (t _LogTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__Log__destroy((*C.rcl_interfaces__msg__Log)(pointer_to_free))
}

func (t _LogTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Log)
	mem := (*C.rcl_interfaces__msg__Log)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.stamp), &m.Stamp)
	mem.level = C.uint8_t(m.Level)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.msg), m.Msg)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.file), m.File)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.function), m.Function)
	mem.line = C.uint32_t(m.Line)
}

func (t _LogTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Log)
	mem := (*C.rcl_interfaces__msg__Log)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.Stamp, unsafe.Pointer(&mem.stamp))
	m.Level = uint8(mem.level)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	primitives.StringAsGoStruct(&m.Msg, unsafe.Pointer(&mem.msg))
	primitives.StringAsGoStruct(&m.File, unsafe.Pointer(&mem.file))
	primitives.StringAsGoStruct(&m.Function, unsafe.Pointer(&mem.function))
	m.Line = uint32(mem.line)
}

func (t _LogTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__Log())
}

type CLog = C.rcl_interfaces__msg__Log
type CLog__Sequence = C.rcl_interfaces__msg__Log__Sequence

func Log__Sequence_to_Go(goSlice *[]Log, cSlice CLog__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Log, int64(cSlice.size))
	for i := 0; i < int(cSlice.size); i++ {
		cIdx := (*C.rcl_interfaces__msg__Log__Sequence)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Log * uintptr(i)),
		))
		LogTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(cIdx))
	}
}
func Log__Sequence_to_C(cSlice *CLog__Sequence, goSlice []Log) {
	if len(goSlice) == 0 {
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__Log)(C.malloc((C.size_t)(C.sizeof_struct_rcl_interfaces__msg__Log * uintptr(len(goSlice)))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity

	for i, v := range goSlice {
		cIdx := (*C.rcl_interfaces__msg__Log)(unsafe.Pointer(
			uintptr(unsafe.Pointer(cSlice.data)) + (C.sizeof_struct_rcl_interfaces__msg__Log * uintptr(i)),
		))
		LogTypeSupport.AsCStruct(unsafe.Pointer(cIdx), &v)
	}
}
func Log__Array_to_Go(goSlice []Log, cSlice []CLog) {
	for i := 0; i < len(cSlice); i++ {
		LogTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Log__Array_to_C(cSlice []CLog, goSlice []Log) {
	for i := 0; i < len(goSlice); i++ {
		LogTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
